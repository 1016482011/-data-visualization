

/* Copyright (c) 2016, xBIM Team, Northumbria University. All rights reserved.

This javascript library is part of xBIM project. It is provided under the same 
Common Development and Distribution License (CDDL) as the xBIM Toolkit. For 
more information see http://www.openbim.org

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 29);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/* no static exports found */
/* all exports used */
/*!*************************!*\
  !*** ./Viewer/state.ts ***!
  \*************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n    * Enumeration for object states.\n    * @readonly\n    * @enum {number}\n    */\nvar State;\n(function (State) {\n    State[State[\"UNDEFINED\"] = 255] = \"UNDEFINED\";\n    State[State[\"HIDDEN\"] = 254] = \"HIDDEN\";\n    State[State[\"HIGHLIGHTED\"] = 253] = \"HIGHLIGHTED\";\n    State[State[\"XRAYVISIBLE\"] = 252] = \"XRAYVISIBLE\";\n    State[State[\"UNSTYLED\"] = 225] = \"UNSTYLED\";\n})(State = exports.State || (exports.State = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL1ZpZXdlci9zdGF0ZS50cz9kYzQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAgICogRW51bWVyYXRpb24gZm9yIG9iamVjdCBzdGF0ZXMuXG4gICAgKiBAcmVhZG9ubHlcbiAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgKi9cbmV4cG9ydCBlbnVtIFN0YXRlIHtcbiAgICBVTkRFRklORUQgPSAyNTUsXG4gICAgSElEREVOID0gMjU0LFxuICAgIEhJR0hMSUdIVEVEID0gMjUzLFxuICAgIFhSQVlWSVNJQkxFID0gMjUyLFxuICAgIFVOU1RZTEVEID0gMjI1XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9WaWV3ZXIvc3RhdGUudHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),

/***/ 2:
/* no static exports found */
/* all exports used */
/*!********************************!*\
  !*** ./Viewer/product-type.ts ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n* Enumeration of product types.\n* @readonly\n* @enum {number}\n*/\nvar ProductType;\n(function (ProductType) {\n    ProductType[ProductType[\"IFCDISTRIBUTIONELEMENT\"] = 44] = \"IFCDISTRIBUTIONELEMENT\";\n    ProductType[ProductType[\"IFCDISTRIBUTIONFLOWELEMENT\"] = 45] = \"IFCDISTRIBUTIONFLOWELEMENT\";\n    ProductType[ProductType[\"IFCDISTRIBUTIONCHAMBERELEMENT\"] = 180] = \"IFCDISTRIBUTIONCHAMBERELEMENT\";\n    ProductType[ProductType[\"IFCENERGYCONVERSIONDEVICE\"] = 175] = \"IFCENERGYCONVERSIONDEVICE\";\n    ProductType[ProductType[\"IFCAIRTOAIRHEATRECOVERY\"] = 1097] = \"IFCAIRTOAIRHEATRECOVERY\";\n    ProductType[ProductType[\"IFCBOILER\"] = 1105] = \"IFCBOILER\";\n    ProductType[ProductType[\"IFCBURNER\"] = 1109] = \"IFCBURNER\";\n    ProductType[ProductType[\"IFCCHILLER\"] = 1119] = \"IFCCHILLER\";\n    ProductType[ProductType[\"IFCCOIL\"] = 1124] = \"IFCCOIL\";\n    ProductType[ProductType[\"IFCCONDENSER\"] = 1132] = \"IFCCONDENSER\";\n    ProductType[ProductType[\"IFCCOOLEDBEAM\"] = 1141] = \"IFCCOOLEDBEAM\";\n    ProductType[ProductType[\"IFCCOOLINGTOWER\"] = 1142] = \"IFCCOOLINGTOWER\";\n    ProductType[ProductType[\"IFCENGINE\"] = 1164] = \"IFCENGINE\";\n    ProductType[ProductType[\"IFCEVAPORATIVECOOLER\"] = 1166] = \"IFCEVAPORATIVECOOLER\";\n    ProductType[ProductType[\"IFCEVAPORATOR\"] = 1167] = \"IFCEVAPORATOR\";\n    ProductType[ProductType[\"IFCHEATEXCHANGER\"] = 1187] = \"IFCHEATEXCHANGER\";\n    ProductType[ProductType[\"IFCHUMIDIFIER\"] = 1188] = \"IFCHUMIDIFIER\";\n    ProductType[ProductType[\"IFCTUBEBUNDLE\"] = 1305] = \"IFCTUBEBUNDLE\";\n    ProductType[ProductType[\"IFCUNITARYEQUIPMENT\"] = 1310] = \"IFCUNITARYEQUIPMENT\";\n    ProductType[ProductType[\"IFCELECTRICGENERATOR\"] = 1160] = \"IFCELECTRICGENERATOR\";\n    ProductType[ProductType[\"IFCELECTRICMOTOR\"] = 1161] = \"IFCELECTRICMOTOR\";\n    ProductType[ProductType[\"IFCMOTORCONNECTION\"] = 1216] = \"IFCMOTORCONNECTION\";\n    ProductType[ProductType[\"IFCSOLARDEVICE\"] = 1270] = \"IFCSOLARDEVICE\";\n    ProductType[ProductType[\"IFCTRANSFORMER\"] = 1303] = \"IFCTRANSFORMER\";\n    ProductType[ProductType[\"IFCFLOWCONTROLLER\"] = 121] = \"IFCFLOWCONTROLLER\";\n    ProductType[ProductType[\"IFCELECTRICDISTRIBUTIONPOINT\"] = 242] = \"IFCELECTRICDISTRIBUTIONPOINT\";\n    ProductType[ProductType[\"IFCAIRTERMINALBOX\"] = 1096] = \"IFCAIRTERMINALBOX\";\n    ProductType[ProductType[\"IFCDAMPER\"] = 1148] = \"IFCDAMPER\";\n    ProductType[ProductType[\"IFCFLOWMETER\"] = 1182] = \"IFCFLOWMETER\";\n    ProductType[ProductType[\"IFCVALVE\"] = 1311] = \"IFCVALVE\";\n    ProductType[ProductType[\"IFCELECTRICDISTRIBUTIONBOARD\"] = 1157] = \"IFCELECTRICDISTRIBUTIONBOARD\";\n    ProductType[ProductType[\"IFCELECTRICTIMECONTROL\"] = 1162] = \"IFCELECTRICTIMECONTROL\";\n    ProductType[ProductType[\"IFCPROTECTIVEDEVICE\"] = 1235] = \"IFCPROTECTIVEDEVICE\";\n    ProductType[ProductType[\"IFCSWITCHINGDEVICE\"] = 1290] = \"IFCSWITCHINGDEVICE\";\n    ProductType[ProductType[\"IFCFLOWFITTING\"] = 467] = \"IFCFLOWFITTING\";\n    ProductType[ProductType[\"IFCDUCTFITTING\"] = 1153] = \"IFCDUCTFITTING\";\n    ProductType[ProductType[\"IFCPIPEFITTING\"] = 1222] = \"IFCPIPEFITTING\";\n    ProductType[ProductType[\"IFCCABLECARRIERFITTING\"] = 1111] = \"IFCCABLECARRIERFITTING\";\n    ProductType[ProductType[\"IFCCABLEFITTING\"] = 1113] = \"IFCCABLEFITTING\";\n    ProductType[ProductType[\"IFCJUNCTIONBOX\"] = 1195] = \"IFCJUNCTIONBOX\";\n    ProductType[ProductType[\"IFCFLOWMOVINGDEVICE\"] = 502] = \"IFCFLOWMOVINGDEVICE\";\n    ProductType[ProductType[\"IFCCOMPRESSOR\"] = 1131] = \"IFCCOMPRESSOR\";\n    ProductType[ProductType[\"IFCFAN\"] = 1177] = \"IFCFAN\";\n    ProductType[ProductType[\"IFCPUMP\"] = 1238] = \"IFCPUMP\";\n    ProductType[ProductType[\"IFCFLOWSEGMENT\"] = 574] = \"IFCFLOWSEGMENT\";\n    ProductType[ProductType[\"IFCDUCTSEGMENT\"] = 1154] = \"IFCDUCTSEGMENT\";\n    ProductType[ProductType[\"IFCPIPESEGMENT\"] = 1223] = \"IFCPIPESEGMENT\";\n    ProductType[ProductType[\"IFCCABLECARRIERSEGMENT\"] = 1112] = \"IFCCABLECARRIERSEGMENT\";\n    ProductType[ProductType[\"IFCCABLESEGMENT\"] = 1115] = \"IFCCABLESEGMENT\";\n    ProductType[ProductType[\"IFCFLOWSTORAGEDEVICE\"] = 371] = \"IFCFLOWSTORAGEDEVICE\";\n    ProductType[ProductType[\"IFCTANK\"] = 1293] = \"IFCTANK\";\n    ProductType[ProductType[\"IFCELECTRICFLOWSTORAGEDEVICE\"] = 1159] = \"IFCELECTRICFLOWSTORAGEDEVICE\";\n    ProductType[ProductType[\"IFCFLOWTERMINAL\"] = 46] = \"IFCFLOWTERMINAL\";\n    ProductType[ProductType[\"IFCFIRESUPPRESSIONTERMINAL\"] = 1179] = \"IFCFIRESUPPRESSIONTERMINAL\";\n    ProductType[ProductType[\"IFCSANITARYTERMINAL\"] = 1262] = \"IFCSANITARYTERMINAL\";\n    ProductType[ProductType[\"IFCSTACKTERMINAL\"] = 1277] = \"IFCSTACKTERMINAL\";\n    ProductType[ProductType[\"IFCWASTETERMINAL\"] = 1315] = \"IFCWASTETERMINAL\";\n    ProductType[ProductType[\"IFCAIRTERMINAL\"] = 1095] = \"IFCAIRTERMINAL\";\n    ProductType[ProductType[\"IFCMEDICALDEVICE\"] = 1212] = \"IFCMEDICALDEVICE\";\n    ProductType[ProductType[\"IFCSPACEHEATER\"] = 1272] = \"IFCSPACEHEATER\";\n    ProductType[ProductType[\"IFCAUDIOVISUALAPPLIANCE\"] = 1099] = \"IFCAUDIOVISUALAPPLIANCE\";\n    ProductType[ProductType[\"IFCCOMMUNICATIONSAPPLIANCE\"] = 1127] = \"IFCCOMMUNICATIONSAPPLIANCE\";\n    ProductType[ProductType[\"IFCELECTRICAPPLIANCE\"] = 1156] = \"IFCELECTRICAPPLIANCE\";\n    ProductType[ProductType[\"IFCLAMP\"] = 1198] = \"IFCLAMP\";\n    ProductType[ProductType[\"IFCLIGHTFIXTURE\"] = 1199] = \"IFCLIGHTFIXTURE\";\n    ProductType[ProductType[\"IFCOUTLET\"] = 1219] = \"IFCOUTLET\";\n    ProductType[ProductType[\"IFCFLOWTREATMENTDEVICE\"] = 425] = \"IFCFLOWTREATMENTDEVICE\";\n    ProductType[ProductType[\"IFCINTERCEPTOR\"] = 1193] = \"IFCINTERCEPTOR\";\n    ProductType[ProductType[\"IFCDUCTSILENCER\"] = 1155] = \"IFCDUCTSILENCER\";\n    ProductType[ProductType[\"IFCFILTER\"] = 1178] = \"IFCFILTER\";\n    ProductType[ProductType[\"IFCDISTRIBUTIONCONTROLELEMENT\"] = 468] = \"IFCDISTRIBUTIONCONTROLELEMENT\";\n    ProductType[ProductType[\"IFCPROTECTIVEDEVICETRIPPINGUNIT\"] = 1236] = \"IFCPROTECTIVEDEVICETRIPPINGUNIT\";\n    ProductType[ProductType[\"IFCACTUATOR\"] = 1091] = \"IFCACTUATOR\";\n    ProductType[ProductType[\"IFCALARM\"] = 1098] = \"IFCALARM\";\n    ProductType[ProductType[\"IFCCONTROLLER\"] = 1139] = \"IFCCONTROLLER\";\n    ProductType[ProductType[\"IFCFLOWINSTRUMENT\"] = 1181] = \"IFCFLOWINSTRUMENT\";\n    ProductType[ProductType[\"IFCSENSOR\"] = 1264] = \"IFCSENSOR\";\n    ProductType[ProductType[\"IFCUNITARYCONTROLELEMENT\"] = 1308] = \"IFCUNITARYCONTROLELEMENT\";\n    ProductType[ProductType[\"IFCDISCRETEACCESSORY\"] = 423] = \"IFCDISCRETEACCESSORY\";\n    ProductType[ProductType[\"IFCFASTENER\"] = 535] = \"IFCFASTENER\";\n    ProductType[ProductType[\"IFCMECHANICALFASTENER\"] = 536] = \"IFCMECHANICALFASTENER\";\n    ProductType[ProductType[\"IFCREINFORCINGBAR\"] = 571] = \"IFCREINFORCINGBAR\";\n    ProductType[ProductType[\"IFCREINFORCINGMESH\"] = 531] = \"IFCREINFORCINGMESH\";\n    ProductType[ProductType[\"IFCTENDON\"] = 261] = \"IFCTENDON\";\n    ProductType[ProductType[\"IFCTENDONANCHOR\"] = 675] = \"IFCTENDONANCHOR\";\n    ProductType[ProductType[\"IFCBUILDINGELEMENTPART\"] = 220] = \"IFCBUILDINGELEMENTPART\";\n    ProductType[ProductType[\"IFCVIBRATIONISOLATOR\"] = 1312] = \"IFCVIBRATIONISOLATOR\";\n    ProductType[ProductType[\"IFCCHAMFEREDGEFEATURE\"] = 765] = \"IFCCHAMFEREDGEFEATURE\";\n    ProductType[ProductType[\"IFCROUNDEDEDGEFEATURE\"] = 766] = \"IFCROUNDEDEDGEFEATURE\";\n    ProductType[ProductType[\"IFCOPENINGELEMENT\"] = 498] = \"IFCOPENINGELEMENT\";\n    ProductType[ProductType[\"IFCOPENINGSTANDARDCASE\"] = 1217] = \"IFCOPENINGSTANDARDCASE\";\n    ProductType[ProductType[\"IFCVOIDINGFEATURE\"] = 1313] = \"IFCVOIDINGFEATURE\";\n    ProductType[ProductType[\"IFCPROJECTIONELEMENT\"] = 384] = \"IFCPROJECTIONELEMENT\";\n    ProductType[ProductType[\"IFCSURFACEFEATURE\"] = 1287] = \"IFCSURFACEFEATURE\";\n    ProductType[ProductType[\"IFCFOOTING\"] = 120] = \"IFCFOOTING\";\n    ProductType[ProductType[\"IFCPILE\"] = 572] = \"IFCPILE\";\n    ProductType[ProductType[\"IFCBEAM\"] = 171] = \"IFCBEAM\";\n    ProductType[ProductType[\"IFCBEAMSTANDARDCASE\"] = 1104] = \"IFCBEAMSTANDARDCASE\";\n    ProductType[ProductType[\"IFCCOLUMN\"] = 383] = \"IFCCOLUMN\";\n    ProductType[ProductType[\"IFCCOLUMNSTANDARDCASE\"] = 1126] = \"IFCCOLUMNSTANDARDCASE\";\n    ProductType[ProductType[\"IFCCURTAINWALL\"] = 456] = \"IFCCURTAINWALL\";\n    ProductType[ProductType[\"IFCDOOR\"] = 213] = \"IFCDOOR\";\n    ProductType[ProductType[\"IFCDOORSTANDARDCASE\"] = 1151] = \"IFCDOORSTANDARDCASE\";\n    ProductType[ProductType[\"IFCMEMBER\"] = 310] = \"IFCMEMBER\";\n    ProductType[ProductType[\"IFCMEMBERSTANDARDCASE\"] = 1214] = \"IFCMEMBERSTANDARDCASE\";\n    ProductType[ProductType[\"IFCPLATE\"] = 351] = \"IFCPLATE\";\n    ProductType[ProductType[\"IFCPLATESTANDARDCASE\"] = 1224] = \"IFCPLATESTANDARDCASE\";\n    ProductType[ProductType[\"IFCRAILING\"] = 350] = \"IFCRAILING\";\n    ProductType[ProductType[\"IFCRAMP\"] = 414] = \"IFCRAMP\";\n    ProductType[ProductType[\"IFCRAMPFLIGHT\"] = 348] = \"IFCRAMPFLIGHT\";\n    ProductType[ProductType[\"IFCROOF\"] = 347] = \"IFCROOF\";\n    ProductType[ProductType[\"IFCSLAB\"] = 99] = \"IFCSLAB\";\n    ProductType[ProductType[\"IFCSLABELEMENTEDCASE\"] = 1268] = \"IFCSLABELEMENTEDCASE\";\n    ProductType[ProductType[\"IFCSLABSTANDARDCASE\"] = 1269] = \"IFCSLABSTANDARDCASE\";\n    ProductType[ProductType[\"IFCSTAIR\"] = 346] = \"IFCSTAIR\";\n    ProductType[ProductType[\"IFCSTAIRFLIGHT\"] = 25] = \"IFCSTAIRFLIGHT\";\n    ProductType[ProductType[\"IFCWALL\"] = 452] = \"IFCWALL\";\n    ProductType[ProductType[\"IFCWALLSTANDARDCASE\"] = 453] = \"IFCWALLSTANDARDCASE\";\n    ProductType[ProductType[\"IFCWALLELEMENTEDCASE\"] = 1314] = \"IFCWALLELEMENTEDCASE\";\n    ProductType[ProductType[\"IFCWINDOW\"] = 667] = \"IFCWINDOW\";\n    ProductType[ProductType[\"IFCWINDOWSTANDARDCASE\"] = 1316] = \"IFCWINDOWSTANDARDCASE\";\n    ProductType[ProductType[\"IFCBUILDINGELEMENTPROXY\"] = 560] = \"IFCBUILDINGELEMENTPROXY\";\n    ProductType[ProductType[\"IFCCOVERING\"] = 382] = \"IFCCOVERING\";\n    ProductType[ProductType[\"IFCCHIMNEY\"] = 1120] = \"IFCCHIMNEY\";\n    ProductType[ProductType[\"IFCSHADINGDEVICE\"] = 1265] = \"IFCSHADINGDEVICE\";\n    ProductType[ProductType[\"IFCELEMENTASSEMBLY\"] = 18] = \"IFCELEMENTASSEMBLY\";\n    ProductType[ProductType[\"IFCFURNISHINGELEMENT\"] = 253] = \"IFCFURNISHINGELEMENT\";\n    ProductType[ProductType[\"IFCFURNITURE\"] = 1184] = \"IFCFURNITURE\";\n    ProductType[ProductType[\"IFCSYSTEMFURNITUREELEMENT\"] = 1291] = \"IFCSYSTEMFURNITUREELEMENT\";\n    ProductType[ProductType[\"IFCTRANSPORTELEMENT\"] = 416] = \"IFCTRANSPORTELEMENT\";\n    ProductType[ProductType[\"IFCVIRTUALELEMENT\"] = 168] = \"IFCVIRTUALELEMENT\";\n    ProductType[ProductType[\"IFCELECTRICALELEMENT\"] = 23] = \"IFCELECTRICALELEMENT\";\n    ProductType[ProductType[\"IFCEQUIPMENTELEMENT\"] = 212] = \"IFCEQUIPMENTELEMENT\";\n    ProductType[ProductType[\"IFCCIVILELEMENT\"] = 1122] = \"IFCCIVILELEMENT\";\n    ProductType[ProductType[\"IFCGEOGRAPHICELEMENT\"] = 1185] = \"IFCGEOGRAPHICELEMENT\";\n    ProductType[ProductType[\"IFCDISTRIBUTIONPORT\"] = 178] = \"IFCDISTRIBUTIONPORT\";\n    ProductType[ProductType[\"IFCPROXY\"] = 447] = \"IFCPROXY\";\n    ProductType[ProductType[\"IFCSTRUCTURALLINEARACTION\"] = 463] = \"IFCSTRUCTURALLINEARACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALLINEARACTIONVARYING\"] = 464] = \"IFCSTRUCTURALLINEARACTIONVARYING\";\n    ProductType[ProductType[\"IFCSTRUCTURALPLANARACTION\"] = 39] = \"IFCSTRUCTURALPLANARACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALPLANARACTIONVARYING\"] = 357] = \"IFCSTRUCTURALPLANARACTIONVARYING\";\n    ProductType[ProductType[\"IFCSTRUCTURALPOINTACTION\"] = 356] = \"IFCSTRUCTURALPOINTACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALCURVEACTION\"] = 1279] = \"IFCSTRUCTURALCURVEACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALSURFACEACTION\"] = 1284] = \"IFCSTRUCTURALSURFACEACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALPOINTREACTION\"] = 354] = \"IFCSTRUCTURALPOINTREACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALCURVEREACTION\"] = 1280] = \"IFCSTRUCTURALCURVEREACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALSURFACEREACTION\"] = 1285] = \"IFCSTRUCTURALSURFACEREACTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALCURVECONNECTION\"] = 534] = \"IFCSTRUCTURALCURVECONNECTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALPOINTCONNECTION\"] = 533] = \"IFCSTRUCTURALPOINTCONNECTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALSURFACECONNECTION\"] = 264] = \"IFCSTRUCTURALSURFACECONNECTION\";\n    ProductType[ProductType[\"IFCSTRUCTURALCURVEMEMBER\"] = 224] = \"IFCSTRUCTURALCURVEMEMBER\";\n    ProductType[ProductType[\"IFCSTRUCTURALCURVEMEMBERVARYING\"] = 227] = \"IFCSTRUCTURALCURVEMEMBERVARYING\";\n    ProductType[ProductType[\"IFCSTRUCTURALSURFACEMEMBER\"] = 420] = \"IFCSTRUCTURALSURFACEMEMBER\";\n    ProductType[ProductType[\"IFCSTRUCTURALSURFACEMEMBERVARYING\"] = 421] = \"IFCSTRUCTURALSURFACEMEMBERVARYING\";\n    ProductType[ProductType[\"IFCANNOTATION\"] = 634] = \"IFCANNOTATION\";\n    ProductType[ProductType[\"IFCBUILDING\"] = 169] = \"IFCBUILDING\";\n    ProductType[ProductType[\"IFCBUILDINGSTOREY\"] = 459] = \"IFCBUILDINGSTOREY\";\n    ProductType[ProductType[\"IFCSITE\"] = 349] = \"IFCSITE\";\n    ProductType[ProductType[\"IFCSPACE\"] = 454] = \"IFCSPACE\";\n    ProductType[ProductType[\"IFCGRID\"] = 564] = \"IFCGRID\";\n    ProductType[ProductType[\"IFCEXTERNALSPATIALELEMENT\"] = 1174] = \"IFCEXTERNALSPATIALELEMENT\";\n    ProductType[ProductType[\"IFCSPATIALZONE\"] = 1275] = \"IFCSPATIALZONE\";\n})(ProductType = exports.ProductType || (exports.ProductType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 29:
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./Viewer/workers/geometry-loader-new.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar model_geometry_1 = __webpack_require__(/*! ../model-geometry */ 3);\n//only run following script if this is created as a Worker\nif (self && self instanceof DedicatedWorkerGlobalScope) {\n    var worker = self;\n    worker.onmessage = function (e) {\n        var model = e.data;\n        var geometry = new model_geometry_1.ModelGeometry();\n        geometry.onerror = function (msg) {\n            throw msg;\n        };\n        geometry.onloaded = function () {\n            try {\n                var msg = {};\n                var transferable = [];\n                for (var i in geometry) {\n                    if (!geometry.hasOwnProperty(i))\n                        continue;\n                    var prop = geometry[i];\n                    if (typeof prop === \"function\")\n                        continue;\n                    //building message object containing values but no functions or anything\n                    msg[i] = prop;\n                    //create array of transferable objects for all typed arrays. Browsers which support Transferable interface will speed this up massively\n                    if (ArrayBuffer.isView(prop))\n                        transferable.push(prop.buffer);\n                }\n                //post the object and pass through all transferable objects\n                worker.postMessage(msg, transferable);\n                worker.close();\n            }\n            catch (e) {\n                worker.close();\n                throw e;\n            }\n        };\n        geometry.loadNew(model);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9WaWV3ZXIvd29ya2Vycy9nZW9tZXRyeS1sb2FkZXItbmV3LnRzPzRiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kZWxHZW9tZXRyeSB9IGZyb20gXCIuLi9tb2RlbC1nZW9tZXRyeVwiO1xuXG4vL29ubHkgcnVuIGZvbGxvd2luZyBzY3JpcHQgaWYgdGhpcyBpcyBjcmVhdGVkIGFzIGEgV29ya2VyXG5pZiAoc2VsZiAmJiBzZWxmIGluc3RhbmNlb2YgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGUgKSB7XG4gICAgdmFyIHdvcmtlciA9IHNlbGYgYXMgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGU7XG4gICAgd29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IGUuZGF0YTtcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IE1vZGVsR2VvbWV0cnkoKTtcblxuICAgICAgICBnZW9tZXRyeS5vbmVycm9yID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgdGhyb3cgbXNnO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VvbWV0cnkub25sb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBtc2cgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmZXJhYmxlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBnZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWdlb21ldHJ5Lmhhc093blByb3BlcnR5KGkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGdlb21ldHJ5W2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vYnVpbGRpbmcgbWVzc2FnZSBvYmplY3QgY29udGFpbmluZyB2YWx1ZXMgYnV0IG5vIGZ1bmN0aW9ucyBvciBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICBtc2dbaV0gPSBwcm9wXG5cbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgYXJyYXkgb2YgdHJhbnNmZXJhYmxlIG9iamVjdHMgZm9yIGFsbCB0eXBlZCBhcnJheXMuIEJyb3dzZXJzIHdoaWNoIHN1cHBvcnQgVHJhbnNmZXJhYmxlIGludGVyZmFjZSB3aWxsIHNwZWVkIHRoaXMgdXAgbWFzc2l2ZWx5XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcocHJvcCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2ZlcmFibGUucHVzaChwcm9wLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9wb3N0IHRoZSBvYmplY3QgYW5kIHBhc3MgdGhyb3VnaCBhbGwgdHJhbnNmZXJhYmxlIG9iamVjdHNcbiAgICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UobXNnLCB0cmFuc2ZlcmFibGUpO1xuICAgICAgICAgICAgICAgIHdvcmtlci5jbG9zZSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHdvcmtlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGdlb21ldHJ5LmxvYWROZXcobW9kZWwpO1xuICAgIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9WaWV3ZXIvd29ya2Vycy9nZW9tZXRyeS1sb2FkZXItbmV3LnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./Viewer/model-geometry.ts ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_reader_1 = __webpack_require__(/*! ./binary-reader */ 4);\nvar triangulated_shape_1 = __webpack_require__(/*! ./triangulated-shape */ 8);\nvar state_1 = __webpack_require__(/*! ./state */ 0);\nvar product_type_1 = __webpack_require__(/*! ./product-type */ 2);\nvar ModelGeometry = (function () {\n    function ModelGeometry() {\n        this.meter = 1000;\n        //this will be used to change appearance of the objects\n        //map objects have a format:\n        //map = {\n        //\tproductID: int,\n        //\ttype: int,\n        //\tbBox: Float32Array(6),\n        //\tspans: [Int32Array([int, int]),Int32Array([int, int]), ...] //spanning indexes defining shapes of product and it's state\n        //};\n        this.productMaps = {};\n    }\n    ModelGeometry.prototype.parseNew = function (binReader) {\n        var _this = this;\n        var br = binReader;\n        var magicNumber = br.readInt32();\n        if (magicNumber != 94132117)\n            throw 'Magic number mismatch.';\n        var version = br.readByte();\n        var numShapes = br.readInt32();\n        var numVertices = br.readInt32();\n        var numTriangles = br.readInt32();\n        var numMatrices = br.readInt32();\n        ;\n        var numProducts = br.readInt32();\n        ;\n        var numStyles = br.readInt32();\n        ;\n        this.meter = br.readFloat32();\n        ;\n        var numRegions = br.readInt16();\n        //set size of arrays to be square usable for texture data\n        //TODO: reflect support for floating point textures\n        var square = function (arity, count) {\n            if (typeof (arity) == 'undefined' || typeof (count) == 'undefined') {\n                throw 'Wrong arguments';\n            }\n            if (count == 0)\n                return 0;\n            var byteLength = count * arity;\n            var imgSide = Math.ceil(Math.sqrt(byteLength / 4));\n            //clamp to parity\n            while ((imgSide * 4) % arity != 0) {\n                imgSide++;\n            }\n            var result = imgSide * imgSide * 4 / arity;\n            return result;\n        };\n        //create target buffers of correct size (avoid reallocation of memory)\n        this.vertices = new Float32Array(square(4, numVertices * 3));\n        this.normals = new Uint8Array(numTriangles * 6);\n        this.indices = new Float32Array(numTriangles * 3);\n        this.styleIndices = new Uint16Array(numTriangles * 3);\n        this.styles = new Uint8Array(square(1, (numStyles + 1) * 4)); //+1 is for a default style\n        this.products = new Float32Array(numTriangles * 3);\n        this.states = new Uint8Array(numTriangles * 3 * 2); //place for state and restyling\n        this.transformations = new Float32Array(numTriangles * 3);\n        this.matrices = new Float32Array(square(4, numMatrices * 16));\n        this.productMaps = {};\n        this.regions = new Array(numRegions);\n        var iVertex = 0;\n        var iIndexForward = 0;\n        var iIndexBackward = numTriangles * 3;\n        var iTransform = 0;\n        var iMatrix = 0;\n        var stateEnum = state_1.State;\n        var typeEnum = product_type_1.ProductType;\n        for (var i = 0; i < numRegions; i++) {\n            var region = new Region();\n            region.population = br.readInt32();\n            region.centre = br.readFloat32Array(3);\n            region.bbox = br.readFloat32Array(6);\n            this.regions[i] = region;\n        }\n        var styleMap = [];\n        styleMap['getStyle'] = function (id) {\n            for (var i = 0; i < this.length; i++) {\n                var item = this[i];\n                if (item.id == id)\n                    return item;\n            }\n            return null;\n        };\n        var iStyle = 0;\n        for (iStyle; iStyle < numStyles; iStyle++) {\n            var styleId = br.readInt32();\n            var R = br.readFloat32() * 255;\n            var G = br.readFloat32() * 255;\n            var B = br.readFloat32() * 255;\n            var A = br.readFloat32() * 255;\n            this.styles.set([R, G, B, A], iStyle * 4);\n            styleMap.push({ id: styleId, index: iStyle, transparent: A < 254 });\n        }\n        this.styles.set([255, 255, 255, 255], iStyle * 4);\n        var defaultStyle = { id: -1, index: iStyle, transparent: A < 254 };\n        styleMap.push(defaultStyle);\n        for (var i = 0; i < numProducts; i++) {\n            var productLabel = br.readInt32();\n            var prodType = br.readInt16();\n            var bBox = br.readFloat32Array(6);\n            var map = {\n                productID: productLabel,\n                type: prodType,\n                bBox: bBox,\n                spans: []\n            };\n            this.productMaps[productLabel] = map;\n        }\n        for (var iShape = 0; iShape < numShapes; iShape++) {\n            var repetition = br.readInt32();\n            var shapeList = [];\n            for (var iProduct = 0; iProduct < repetition; iProduct++) {\n                var prodLabel = br.readInt32();\n                var instanceTypeId = br.readInt16();\n                var instanceLabel = br.readInt32();\n                var styleId = br.readInt32();\n                var transformation = null;\n                // if (repetition > 1) {\n                transformation = version === 1 ? br.readFloat32Array(16) : br.readFloat64Array(16);\n                this.matrices.set(transformation, iMatrix);\n                iMatrix += 16;\n                // }\n                // read out transformation num trangles\n                br.readInt32();\n                var styleItem = styleMap['getStyle'](styleId);\n                if (styleItem === null)\n                    styleItem = defaultStyle;\n                shapeList.push({\n                    pLabel: prodLabel,\n                    iLabel: instanceLabel,\n                    style: styleItem.index,\n                    transparent: styleItem.transparent,\n                    transform: transformation != null ? iTransform++ : -1\n                });\n            }\n            //read shape geometry\n            var shapeGeom = new triangulated_shape_1.TriangulatedShape();\n            // read out geometry num vertices\n            br.readInt32();\n            // read out length\n            br.readInt32();\n            shapeGeom.parse(br);\n            //copy shape data into inner array and set to null so it can be garbage collected\n            shapeList.forEach(function (shape) {\n                var iIndex = 0;\n                //set iIndex according to transparency either from beginning or at the end\n                if (shape.transparent) {\n                    iIndex = iIndexBackward - shapeGeom.indices.length;\n                }\n                else {\n                    iIndex = iIndexForward;\n                }\n                var begin = iIndex;\n                var map = _this.productMaps[shape.pLabel];\n                if (typeof (map) === \"undefined\") {\n                    //throw \"Product hasn't been defined before.\";\n                    map = {\n                        productID: 0,\n                        type: typeEnum.IFCOPENINGELEMENT,\n                        bBox: new Float32Array(6),\n                        spans: []\n                    };\n                    _this.productMaps[shape.pLabel] = map;\n                }\n                _this.normals.set(shapeGeom.normals, iIndex * 2);\n                //switch spaces and openings off by default\n                var state = map.type == typeEnum.IFCSPACE || map.type == typeEnum.IFCOPENINGELEMENT\n                    ? stateEnum.HIDDEN\n                    : 0xFF; //0xFF is for the default state\n                //fix indices to right absolute position. It is relative to the shape.\n                for (var i = 0; i < shapeGeom.indices.length; i++) {\n                    _this.indices[iIndex] = shapeGeom.indices[i] + iVertex / 3;\n                    _this.products[iIndex] = shape.pLabel;\n                    _this.styleIndices[iIndex] = shape.style;\n                    _this.transformations[iIndex] = shape.transform;\n                    _this.states[2 * iIndex] = state; //set state\n                    _this.states[2 * iIndex + 1] = 0xFF; //default style\n                    iIndex++;\n                }\n                var end = iIndex;\n                map.spans.push(new Int32Array([begin, end]));\n                if (shape.transparent)\n                    iIndexBackward -= shapeGeom.indices.length;\n                else\n                    iIndexForward += shapeGeom.indices.length;\n            }, this);\n            //copy geometry and keep track of amount so that we can fix indices to right position\n            //this must be the last step to have correct iVertex number above\n            this.vertices.set(shapeGeom.vertices, iVertex);\n            iVertex += shapeGeom.vertices.length;\n            shapeGeom = null;\n        }\n        //binary reader should be at the end by now\n        if (!br.isEOF()) {\n            //throw 'Binary reader is not at the end of the file.';\n        }\n        this.transparentIndex = iIndexForward;\n    };\n    //Source has to be either URL of wexBIM file or Blob representing wexBIM file\n    ModelGeometry.prototype.loadNew = function (source) {\n        //binary reading\n        var br = new binary_reader_1.BinaryReader();\n        var self = this;\n        br.onloaded = function () {\n            self.parseNew(br);\n            if (self.onloaded) {\n                self.onloaded(this);\n            }\n        };\n        br.onerror = function (msg) {\n            if (self.onerror)\n                self.onerror(msg);\n        };\n        br.load(source);\n    };\n    ModelGeometry.prototype.parse = function (binReader) {\n        var _this = this;\n        var br = binReader;\n        var magicNumber = br.readInt32();\n        if (magicNumber != 94132117)\n            throw 'Magic number mismatch.';\n        var version = br.readByte();\n        var numShapes = br.readInt32();\n        var numVertices = br.readInt32();\n        var numTriangles = br.readInt32();\n        var numMatrices = br.readInt32();\n        ;\n        var numProducts = br.readInt32();\n        ;\n        var numStyles = br.readInt32();\n        ;\n        this.meter = br.readFloat32();\n        ;\n        var numRegions = br.readInt16();\n        //set size of arrays to be square usable for texture data\n        //TODO: reflect support for floating point textures\n        var square = function (arity, count) {\n            if (typeof (arity) == 'undefined' || typeof (count) == 'undefined') {\n                throw 'Wrong arguments';\n            }\n            if (count == 0)\n                return 0;\n            var byteLength = count * arity;\n            var imgSide = Math.ceil(Math.sqrt(byteLength / 4));\n            //clamp to parity\n            while ((imgSide * 4) % arity != 0) {\n                imgSide++;\n            }\n            var result = imgSide * imgSide * 4 / arity;\n            return result;\n        };\n        //create target buffers of correct size (avoid reallocation of memory)\n        this.vertices = new Float32Array(square(4, numVertices * 3));\n        this.normals = new Uint8Array(numTriangles * 6);\n        this.indices = new Float32Array(numTriangles * 3);\n        this.styleIndices = new Uint16Array(numTriangles * 3);\n        this.styles = new Uint8Array(square(1, (numStyles + 1) * 4)); //+1 is for a default style\n        this.products = new Float32Array(numTriangles * 3);\n        this.states = new Uint8Array(numTriangles * 3 * 2); //place for state and restyling\n        this.transformations = new Float32Array(numTriangles * 3);\n        this.matrices = new Float32Array(square(4, numMatrices * 16));\n        this.productMaps = {};\n        this.regions = new Array(numRegions);\n        var iVertex = 0;\n        var iIndexForward = 0;\n        var iIndexBackward = numTriangles * 3;\n        var iTransform = 0;\n        var iMatrix = 0;\n        var stateEnum = state_1.State;\n        var typeEnum = product_type_1.ProductType;\n        for (var i = 0; i < numRegions; i++) {\n            var region = new Region();\n            region.population = br.readInt32();\n            region.centre = br.readFloat32Array(3);\n            region.bbox = br.readFloat32Array(6);\n            this.regions[i] = region;\n        }\n        var styleMap = [];\n        styleMap['getStyle'] = function (id) {\n            for (var i = 0; i < this.length; i++) {\n                var item = this[i];\n                if (item.id == id)\n                    return item;\n            }\n            return null;\n        };\n        var iStyle = 0;\n        for (iStyle; iStyle < numStyles; iStyle++) {\n            var styleId = br.readInt32();\n            var R = br.readFloat32() * 255;\n            var G = br.readFloat32() * 255;\n            var B = br.readFloat32() * 255;\n            var A = br.readFloat32() * 255;\n            this.styles.set([R, G, B, A], iStyle * 4);\n            styleMap.push({ id: styleId, index: iStyle, transparent: A < 254 });\n        }\n        this.styles.set([255, 255, 255, 255], iStyle * 4);\n        var defaultStyle = { id: -1, index: iStyle, transparent: A < 254 };\n        styleMap.push(defaultStyle);\n        for (var i = 0; i < numProducts; i++) {\n            var productLabel = br.readInt32();\n            var prodType = br.readInt16();\n            var bBox = br.readFloat32Array(6);\n            var map = {\n                productID: productLabel,\n                type: prodType,\n                bBox: bBox,\n                spans: []\n            };\n            this.productMaps[productLabel] = map;\n        }\n        for (var iShape = 0; iShape < numShapes; iShape++) {\n            var repetition = br.readInt32();\n            var shapeList = [];\n            for (var iProduct = 0; iProduct < repetition; iProduct++) {\n                var prodLabel = br.readInt32();\n                var instanceTypeId = br.readInt16();\n                var instanceLabel = br.readInt32();\n                var styleId = br.readInt32();\n                var transformation = null;\n                if (repetition > 1) {\n                    transformation = version === 1 ? br.readFloat32Array(16) : br.readFloat64Array(16);\n                    this.matrices.set(transformation, iMatrix);\n                    iMatrix += 16;\n                }\n                var styleItem = styleMap['getStyle'](styleId);\n                if (styleItem === null)\n                    styleItem = defaultStyle;\n                shapeList.push({\n                    pLabel: prodLabel,\n                    iLabel: instanceLabel,\n                    style: styleItem.index,\n                    transparent: styleItem.transparent,\n                    transform: transformation != null ? iTransform++ : -1\n                });\n            }\n            //read shape geometry\n            var shapeGeom = new triangulated_shape_1.TriangulatedShape();\n            shapeGeom.parse(br);\n            //copy shape data into inner array and set to null so it can be garbage collected\n            shapeList.forEach(function (shape) {\n                var iIndex = 0;\n                //set iIndex according to transparency either from beginning or at the end\n                if (shape.transparent) {\n                    iIndex = iIndexBackward - shapeGeom.indices.length;\n                }\n                else {\n                    iIndex = iIndexForward;\n                }\n                var begin = iIndex;\n                var map = _this.productMaps[shape.pLabel];\n                if (typeof (map) === \"undefined\") {\n                    //throw \"Product hasn't been defined before.\";\n                    map = {\n                        productID: 0,\n                        type: typeEnum.IFCOPENINGELEMENT,\n                        bBox: new Float32Array(6),\n                        spans: []\n                    };\n                    _this.productMaps[shape.pLabel] = map;\n                }\n                _this.normals.set(shapeGeom.normals, iIndex * 2);\n                //switch spaces and openings off by default\n                var state = map.type == typeEnum.IFCSPACE || map.type == typeEnum.IFCOPENINGELEMENT\n                    ? stateEnum.HIDDEN\n                    : 0xFF; //0xFF is for the default state\n                //fix indices to right absolute position. It is relative to the shape.\n                for (var i = 0; i < shapeGeom.indices.length; i++) {\n                    _this.indices[iIndex] = shapeGeom.indices[i] + iVertex / 3;\n                    _this.products[iIndex] = shape.pLabel;\n                    _this.styleIndices[iIndex] = shape.style;\n                    _this.transformations[iIndex] = shape.transform;\n                    _this.states[2 * iIndex] = state; //set state\n                    _this.states[2 * iIndex + 1] = 0xFF; //default style\n                    iIndex++;\n                }\n                var end = iIndex;\n                map.spans.push(new Int32Array([begin, end]));\n                if (shape.transparent)\n                    iIndexBackward -= shapeGeom.indices.length;\n                else\n                    iIndexForward += shapeGeom.indices.length;\n            }, this);\n            //copy geometry and keep track of amount so that we can fix indices to right position\n            //this must be the last step to have correct iVertex number above\n            this.vertices.set(shapeGeom.vertices, iVertex);\n            iVertex += shapeGeom.vertices.length;\n            shapeGeom = null;\n        }\n        //binary reader should be at the end by now\n        if (!br.isEOF()) {\n            //throw 'Binary reader is not at the end of the file.';\n        }\n        this.transparentIndex = iIndexForward;\n    };\n    //Source has to be either URL of wexBIM file or Blob representing wexBIM file\n    ModelGeometry.prototype.load = function (source) {\n        //binary reading\n        var br = new binary_reader_1.BinaryReader();\n        var self = this;\n        br.onloaded = function () {\n            self.parse(br);\n            if (self.onloaded) {\n                self.onloaded(this);\n            }\n        };\n        br.onerror = function (msg) {\n            if (self.onerror)\n                self.onerror(msg);\n        };\n        br.load(source);\n    };\n    return ModelGeometry;\n}());\nexports.ModelGeometry = ModelGeometry;\nvar ProductMap = (function () {\n    function ProductMap() {\n    }\n    return ProductMap;\n}());\nexports.ProductMap = ProductMap;\nvar Region = (function () {\n    function Region(region) {\n        this.population = -1;\n        this.centre = null;\n        this.bbox = null;\n        if (region) {\n            this.population = region.population;\n            this.centre = new Float32Array(region.centre);\n            this.bbox = new Float32Array(region.bbox);\n        }\n    }\n    /**\n     * Returns clone of this region\n     */\n    Region.prototype.clone = function () {\n        var clone = new Region();\n        clone.population = this.population;\n        clone.centre = new Float32Array(this.centre);\n        clone.bbox = new Float32Array(this.bbox);\n        return clone;\n    };\n    /**\n     * Returns new region which is a merge of this region and the argument\n     * @param region region to be merged\n     */\n    Region.prototype.merge = function (region) {\n        //if this is a new empty region, return clone of the argument\n        if (this.population === -1 && this.centre === null && this.bbox === null)\n            return new Region(region);\n        var out = new Region();\n        out.population = this.population + region.population;\n        var x = Math.min(this.bbox[0], region.bbox[0]);\n        var y = Math.min(this.bbox[1], region.bbox[1]);\n        var z = Math.min(this.bbox[2], region.bbox[2]);\n        var x2 = Math.min(this.bbox[0] + this.bbox[3], region.bbox[0] + region.bbox[3]);\n        var y2 = Math.min(this.bbox[1] + this.bbox[4], region.bbox[1] + region.bbox[4]);\n        var z2 = Math.min(this.bbox[2] + this.bbox[5], region.bbox[2] + region.bbox[5]);\n        var sx = x2 - x;\n        var sy = y2 - y;\n        var sz = z2 - z;\n        var cx = (x + x2) / 2.0;\n        var cy = (y + y2) / 2.0;\n        var cz = (z + z2) / 2.0;\n        out.bbox = new Float32Array([x, y, z, sx, sy, sz]);\n        out.centre = new Float32Array([cx, cy, cz]);\n        return out;\n    };\n    return Region;\n}());\nexports.Region = Region;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 4:
/* no static exports found */
/* all exports used */
/*!*********************************!*\
  !*** ./Viewer/binary-reader.ts ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convenient class for binary reading. Arrays are read as new views on slices of the original data buffer,\n * individual values are read using little endian data view.\n */\nvar BinaryReader = (function () {\n    function BinaryReader() {\n        this._buffer = null;\n        this._view = null;\n        this._position = 0;\n    }\n    Object.defineProperty(BinaryReader.prototype, \"Position\", {\n        /**\n         * Current position\n         */\n        get: function () {\n            return this._position;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Pass url string, blob, file of byte array to this function to initialize the reader. Only array buffer takes imidiate effect.\n     * Othe sources are loaded asynchronously and you need to use 'onloaded' delegate to use the reader only after it is initialized woth the data.\n     * @param source URL string of the file or BLOB or File or ArrayBuffer object\n     */\n    BinaryReader.prototype.load = function (source) {\n        this._position = 0;\n        var self = this;\n        if (typeof (source) == 'undefined' || source == null)\n            throw 'Source must be defined';\n        if (typeof (source) == 'string') {\n            var xhr;\n            xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", source, true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4 && xhr.status == 200) {\n                    var fReader = new FileReader();\n                    fReader.onloadend = function () {\n                        if (fReader.result) {\n                            //set data buffer for next processing\n                            self._buffer = fReader.result;\n                            self._view = new DataView(self._buffer);\n                            //do predefined processing of the data\n                            if (self.onloaded) {\n                                self.onloaded(self);\n                            }\n                        }\n                    };\n                    fReader.readAsArrayBuffer(xhr.response);\n                }\n                //throw exception as a warning\n                if (xhr.readyState == 4 && xhr.status != 200) {\n                    var msg = 'Failed to fetch binary data from server. Server code: ' +\n                        xhr.status +\n                        '. This might be due to CORS policy of your browser if you run this as a local file.';\n                    if (self.onerror)\n                        self.onerror(msg);\n                    throw msg;\n                }\n            };\n            xhr.responseType = 'blob';\n            xhr.send();\n        }\n        else if (source instanceof Blob || source instanceof File) {\n            var fReader = new FileReader();\n            fReader.onloadend = function () {\n                if (fReader.result) {\n                    //set data buffer for next processing\n                    self._buffer = fReader.result;\n                    self._view = new DataView(self._buffer);\n                    //do predefined processing of the data\n                    if (self.onloaded) {\n                        self.onloaded(self);\n                    }\n                }\n            };\n            fReader.readAsArrayBuffer(source);\n        }\n        else if (source instanceof ArrayBuffer) {\n            this._buffer = source;\n            this._view = new DataView(self._buffer);\n            if (self.onloaded) {\n                self.onloaded(self);\n            }\n        }\n    };\n    BinaryReader.prototype.seek = function (position) {\n        if (position < 0 || position > this._buffer.byteLength)\n            throw \"Position out of range.\";\n        this._position = position;\n    };\n    BinaryReader.prototype.isEOF = function () {\n        if (this._position == null)\n            throw \"Position is not defined\";\n        return this._position == this._buffer.byteLength;\n    };\n    BinaryReader.prototype.readArray = function (unitSize, count, ctor) {\n        if (count == null)\n            count = 1;\n        var length = unitSize * count;\n        var offset = this._position;\n        this._position += length;\n        var result;\n        return count === 1\n            ? new ctor(this._buffer.slice(offset, offset + length))[0]\n            : new ctor(this._buffer.slice(offset, offset + length));\n    };\n    BinaryReader.prototype.move = function (size) {\n        var offset = this._position;\n        this._position += size;\n        return offset;\n    };\n    BinaryReader.prototype.readByte = function () {\n        return this.readUint8();\n    };\n    BinaryReader.prototype.readByteArray = function (count) {\n        return this.readUint8Array(count);\n    };\n    BinaryReader.prototype.readUint8 = function () {\n        var offset = this.move(1);\n        return this._view.getUint8(offset);\n    };\n    BinaryReader.prototype.readUint8Array = function (count) {\n        return this.readArray(1, count, Uint8Array);\n    };\n    BinaryReader.prototype.readInt16 = function () {\n        var offset = this.move(2);\n        return this._view.getInt16(offset, true);\n    };\n    BinaryReader.prototype.readInt16Array = function (count) {\n        return this.readArray(2, count, Int16Array);\n    };\n    BinaryReader.prototype.readUInt16 = function () {\n        var offset = this.move(2);\n        return this._view.getUint16(offset, true);\n    };\n    BinaryReader.prototype.readUint16Array = function (count) {\n        return this.readArray(2, count, Uint16Array);\n    };\n    BinaryReader.prototype.readInt32 = function () {\n        var offset = this.move(4);\n        return this._view.getInt32(offset, true);\n    };\n    BinaryReader.prototype.readInt32Array = function (count) {\n        return this.readArray(4, count, Int32Array);\n    };\n    BinaryReader.prototype.readUint32 = function () {\n        var offset = this.move(4);\n        return this._view.getUint32(offset, true);\n    };\n    BinaryReader.prototype.readUint32Array = function (count) {\n        return this.readArray(4, count, Uint32Array);\n    };\n    BinaryReader.prototype.readFloat32 = function () {\n        var offset = this.move(4);\n        return this._view.getFloat32(offset, true);\n    };\n    BinaryReader.prototype.readFloat32Array = function (count) {\n        return this.readArray(4, count, Float32Array);\n    };\n    BinaryReader.prototype.readFloat64 = function () {\n        var offset = this.move(8);\n        return this._view.getFloat64(offset, true);\n    };\n    BinaryReader.prototype.readFloat64Array = function (count) {\n        return this.readArray(8, count, Float64Array);\n    };\n    //functions for a higher objects like points, colours and matrices\n    BinaryReader.prototype.readChar = function (count) {\n        if (count == null)\n            count = 1;\n        var bytes = this.readByteArray(count);\n        var result = new Array(count);\n        for (var i in bytes) {\n            result[i] = String.fromCharCode(bytes[i]);\n        }\n        return count === 1 ? result[0] : result;\n    };\n    BinaryReader.prototype.readPoint = function (count) {\n        if (count == null)\n            count = 1;\n        var coords = this.readFloat32Array(count * 3);\n        var result = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var offset = i * 3 * 4;\n            //only create new view on the buffer so that no new memory is allocated\n            var point = new Float32Array(coords.buffer, offset, 3);\n            result[i] = point;\n        }\n        return count === 1 ? result[0] : result;\n    };\n    BinaryReader.prototype.readRgba = function (count) {\n        if (count == null)\n            count = 1;\n        var values = this.readByteArray(count * 4);\n        var result = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var offset = i * 4;\n            var colour = new Uint8Array(values.buffer, offset, 4);\n            result[i] = colour;\n        }\n        return count === 1 ? result[0] : result;\n    };\n    BinaryReader.prototype.readPackedNormal = function (count) {\n        if (count == null)\n            count = 1;\n        var values = this.readUint8Array(count * 2);\n        var result = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var uv = new Uint8Array(values.buffer, i * 2, 2);\n            result[i] = uv;\n        }\n        return count === 1 ? result[0] : result;\n    };\n    BinaryReader.prototype.readMatrix4x4 = function (count) {\n        if (count == null)\n            count = 1;\n        var values = this.readFloat32Array(count * 16);\n        var result = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var offset = i * 16 * 4;\n            var matrix = new Float32Array(values.buffer, offset, 16);\n            result[i] = matrix;\n        }\n        return count === 1 ? result[0] : result;\n    };\n    BinaryReader.prototype.readMatrix4x4_64 = function (count) {\n        if (count == null)\n            count = 1;\n        var values = this.readFloat64Array(count * 16);\n        var result = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var offset = i * 16 * 8;\n            var matrix = new Float64Array(values.buffer, offset, 16);\n            result[i] = matrix;\n        }\n        return count === 1 ? result[0] : result;\n    };\n    /**\n     * Reads slice of data from the underlying array buffer\n     * @param length Length of requested data. Start is at current position\n     */\n    BinaryReader.prototype.readData = function (length) {\n        var offset = this.move(length);\n        return this._buffer.slice(offset, offset + length);\n    };\n    return BinaryReader;\n}());\nexports.BinaryReader = BinaryReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 8:
/* no static exports found */
/* all exports used */
/*!**************************************!*\
  !*** ./Viewer/triangulated-shape.ts ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_reader_1 = __webpack_require__(/*! ./binary-reader */ 4);\nvar TriangulatedShape = (function () {\n    function TriangulatedShape() {\n        //This would load only shape data from binary file\n        this.load = function (source) {\n            //binary reading\n            var br = new binary_reader_1.BinaryReader();\n            var self = this;\n            br.onloaded = function () {\n                self.parse(br);\n                if (self.onloaded) {\n                    self.onloaded(this);\n                }\n            };\n            br.load(source);\n        };\n    }\n    //this will get xBinaryReader on the current position and will parse it's content to fill itself with vertices, normals and vertex indices\n    TriangulatedShape.prototype.parse = function (binReader) {\n        var self = this;\n        var version = binReader.readByte();\n        var numVertices = binReader.readInt32();\n        var numOfTriangles = binReader.readInt32();\n        self.vertices = binReader.readFloat32Array(numVertices * 3);\n        //allocate memory of defined size (to avoid reallocation of memory)\n        self.indices = new Uint32Array(numOfTriangles * 3);\n        self.normals = new Uint8Array(numOfTriangles * 6);\n        //indices for incremental adding of indices and normals\n        var iIndex = 0;\n        var readIndex;\n        if (numVertices <= 0xFF) {\n            readIndex = function (count) { return binReader.readByteArray(count); };\n        }\n        else if (numVertices <= 0xFFFF) {\n            readIndex = function (count) { return binReader.readUint16Array(count); };\n        }\n        else {\n            readIndex = function (count) { return binReader.readInt32Array(count); };\n        }\n        var numFaces = binReader.readInt32();\n        if (numVertices === 0 || numOfTriangles === 0)\n            return;\n        for (var i = 0; i < numFaces; i++) {\n            var numTrianglesInFace = binReader.readInt32();\n            if (numTrianglesInFace == 0)\n                continue;\n            var isPlanar = numTrianglesInFace > 0;\n            numTrianglesInFace = Math.abs(numTrianglesInFace);\n            if (isPlanar) {\n                var normal = binReader.readByteArray(2);\n                //read and set all indices\n                var planarIndices = readIndex(3 * numTrianglesInFace);\n                self.indices.set(planarIndices, iIndex);\n                for (var j = 0; j < numTrianglesInFace * 3; j++) {\n                    //add three identical normals because this is planar but needs to be expanded for WebGL\n                    self.normals[iIndex * 2] = normal[0];\n                    self.normals[iIndex * 2 + 1] = normal[1];\n                    iIndex++;\n                }\n            }\n            else {\n                for (var j = 0; j < numTrianglesInFace; j++) {\n                    self.indices[iIndex] = readIndex(); //a\n                    self.normals.set(binReader.readByteArray(2), iIndex * 2);\n                    iIndex++;\n                    self.indices[iIndex] = readIndex(); //b\n                    self.normals.set(binReader.readByteArray(2), iIndex * 2);\n                    iIndex++;\n                    self.indices[iIndex] = readIndex(); //c\n                    self.normals.set(binReader.readByteArray(2), iIndex * 2);\n                    iIndex++;\n                }\n            }\n        }\n    };\n    return TriangulatedShape;\n}());\nexports.TriangulatedShape = TriangulatedShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL1ZpZXdlci90cmlhbmd1bGF0ZWQtc2hhcGUudHM/MDVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5hcnlSZWFkZXIgfSBmcm9tIFwiLi9iaW5hcnktcmVhZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBUcmlhbmd1bGF0ZWRTaGFwZSB7XG5cbiAgICAvL3RoaXMgd2lsbCBnZXQgeEJpbmFyeVJlYWRlciBvbiB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgd2lsbCBwYXJzZSBpdCdzIGNvbnRlbnQgdG8gZmlsbCBpdHNlbGYgd2l0aCB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdmVydGV4IGluZGljZXNcbiAgICBwdWJsaWMgcGFyc2UoYmluUmVhZGVyOiBCaW5hcnlSZWFkZXIpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGJpblJlYWRlci5yZWFkQnl0ZSgpO1xuICAgICAgICB2YXIgbnVtVmVydGljZXMgPSBiaW5SZWFkZXIucmVhZEludDMyKCk7XG4gICAgICAgIHZhciBudW1PZlRyaWFuZ2xlcyA9IGJpblJlYWRlci5yZWFkSW50MzIoKTtcbiAgICAgICAgc2VsZi52ZXJ0aWNlcyA9IGJpblJlYWRlci5yZWFkRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMyk7XG4gICAgICAgIC8vYWxsb2NhdGUgbWVtb3J5IG9mIGRlZmluZWQgc2l6ZSAodG8gYXZvaWQgcmVhbGxvY2F0aW9uIG9mIG1lbW9yeSlcbiAgICAgICAgc2VsZi5pbmRpY2VzID0gbmV3IFVpbnQzMkFycmF5KG51bU9mVHJpYW5nbGVzICogMyk7XG4gICAgICAgIHNlbGYubm9ybWFscyA9IG5ldyBVaW50OEFycmF5KG51bU9mVHJpYW5nbGVzICogNik7XG4gICAgICAgIC8vaW5kaWNlcyBmb3IgaW5jcmVtZW50YWwgYWRkaW5nIG9mIGluZGljZXMgYW5kIG5vcm1hbHNcbiAgICAgICAgdmFyIGlJbmRleCA9IDA7XG4gICAgICAgIHZhciByZWFkSW5kZXg7XG4gICAgICAgIGlmIChudW1WZXJ0aWNlcyA8PSAweEZGKSB7XG4gICAgICAgICAgICByZWFkSW5kZXggPSBmdW5jdGlvbiAoY291bnQpIHsgcmV0dXJuIGJpblJlYWRlci5yZWFkQnl0ZUFycmF5KGNvdW50KTsgfTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1WZXJ0aWNlcyA8PSAweEZGRkYpIHtcbiAgICAgICAgICAgIHJlYWRJbmRleCA9IGZ1bmN0aW9uIChjb3VudCkgeyByZXR1cm4gYmluUmVhZGVyLnJlYWRVaW50MTZBcnJheShjb3VudCk7IH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWFkSW5kZXggPSBmdW5jdGlvbiAoY291bnQpIHsgcmV0dXJuIGJpblJlYWRlci5yZWFkSW50MzJBcnJheShjb3VudCk7IH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbnVtRmFjZXMgPSBiaW5SZWFkZXIucmVhZEludDMyKCk7XG5cbiAgICAgICAgaWYgKG51bVZlcnRpY2VzID09PSAwIHx8IG51bU9mVHJpYW5nbGVzID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRmFjZXM7IGkrKykge1xuICAgICAgICAgICAgdmFyIG51bVRyaWFuZ2xlc0luRmFjZSA9IGJpblJlYWRlci5yZWFkSW50MzIoKTtcbiAgICAgICAgICAgIGlmIChudW1UcmlhbmdsZXNJbkZhY2UgPT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBpc1BsYW5hciA9IG51bVRyaWFuZ2xlc0luRmFjZSA+IDA7XG4gICAgICAgICAgICBudW1UcmlhbmdsZXNJbkZhY2UgPSBNYXRoLmFicyhudW1UcmlhbmdsZXNJbkZhY2UpO1xuICAgICAgICAgICAgaWYgKGlzUGxhbmFyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbCA9IGJpblJlYWRlci5yZWFkQnl0ZUFycmF5KDIpO1xuICAgICAgICAgICAgICAgIC8vcmVhZCBhbmQgc2V0IGFsbCBpbmRpY2VzXG4gICAgICAgICAgICAgICAgdmFyIHBsYW5hckluZGljZXMgPSByZWFkSW5kZXgoMyAqIG51bVRyaWFuZ2xlc0luRmFjZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5pbmRpY2VzLnNldChwbGFuYXJJbmRpY2VzLCBpSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBudW1UcmlhbmdsZXNJbkZhY2UgKiAzOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgdGhyZWUgaWRlbnRpY2FsIG5vcm1hbHMgYmVjYXVzZSB0aGlzIGlzIHBsYW5hciBidXQgbmVlZHMgdG8gYmUgZXhwYW5kZWQgZm9yIFdlYkdMXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm9ybWFsc1tpSW5kZXggKiAyXSA9IG5vcm1hbFswXTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3JtYWxzW2lJbmRleCAqIDIgKyAxXSA9IG5vcm1hbFsxXTtcbiAgICAgICAgICAgICAgICAgICAgaUluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG51bVRyaWFuZ2xlc0luRmFjZTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kaWNlc1tpSW5kZXhdID0gcmVhZEluZGV4KCk7IC8vYVxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vcm1hbHMuc2V0KGJpblJlYWRlci5yZWFkQnl0ZUFycmF5KDIpLCBpSW5kZXggKiAyKTtcbiAgICAgICAgICAgICAgICAgICAgaUluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbmRpY2VzW2lJbmRleF0gPSByZWFkSW5kZXgoKTsgLy9iXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm9ybWFscy5zZXQoYmluUmVhZGVyLnJlYWRCeXRlQXJyYXkoMiksIGlJbmRleCAqIDIpO1xuICAgICAgICAgICAgICAgICAgICBpSW5kZXgrKztcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmluZGljZXNbaUluZGV4XSA9IHJlYWRJbmRleCgpOyAvL2NcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3JtYWxzLnNldChiaW5SZWFkZXIucmVhZEJ5dGVBcnJheSgyKSwgaUluZGV4ICogMik7XG4gICAgICAgICAgICAgICAgICAgIGlJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vVGhpcyB3b3VsZCBsb2FkIG9ubHkgc2hhcGUgZGF0YSBmcm9tIGJpbmFyeSBmaWxlXG4gICAgcHVibGljIGxvYWQgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIC8vYmluYXJ5IHJlYWRpbmdcbiAgICAgICAgdmFyIGJyID0gbmV3IEJpbmFyeVJlYWRlcigpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGJyLm9ubG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5wYXJzZShicik7XG4gICAgICAgICAgICBpZiAoc2VsZi5vbmxvYWRlZCkge1xuICAgICAgICAgICAgICAgIHNlbGYub25sb2FkZWQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGJyLmxvYWQoc291cmNlKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyB2ZXJ0aWNlczogRmxvYXQzMkFycmF5O1xuICAgIHB1YmxpYyBpbmRpY2VzOiBVaW50MzJBcnJheTtcbiAgICBwdWJsaWMgbm9ybWFsczogVWludDhBcnJheTtcblxuICAgIC8vdGhpcyBmdW5jdGlvbiB3aWxsIGdldCBjYWxsZWQgd2hlbiBsb2FkaW5nIGlzIGZpbmlzaGVkLlxuICAgIC8vVGhpcyB3b24ndCBnZXQgY2FsbGVkIGFmdGVyIHBhcnNlIHdoaWNoIGlzIHN1cHBvc2VkIHRvIGhhcHBlbiBpbiBsYXJnZSBvcGVyYXRpb24uXG4gICAgcHVibGljIG9ubG9hZGVkOiAoc2hhcGU6IFRyaWFuZ3VsYXRlZFNoYXBlKSA9PiB2b2lkO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vVmlld2VyL3RyaWFuZ3VsYXRlZC1zaGFwZS50cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUVBO0FBQUE7QUFnRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQXBGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXdCQTtBQUFBO0FBdEZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

/******/ });
});